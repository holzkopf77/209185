.TH "Benchmark" 3 "Thu Mar 12 2015" "Version 1.1" "Lab 1" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Benchmark \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <benchmark_frm\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBtest\fP (\fBInputFiles\fP files)"
.br
.RI "\fIMain testing function\&. \fP"
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBgenerateRaport\fP (long double nextTime, int size)"
.br
.RI "\fIGenerates raport with program tests outputs\&. \fP"
.ti -1c
.RI "long double \fBgetAvr\fP (std::vector< long double >times)"
.br
.RI "\fIMeasures the average duration from 10 samples\&. \fP"
.ti -1c
.RI "void \fBmeasureTime\fP (int *dataTable, int dataSize)"
.br
.RI "\fIMeasures the duration of the work of assignment function\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "std::vector< long double > \fBtestTimes\fP"
.br
.RI "\fIA container for calculated times\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Making a framework for testing inserted data structure\&. Using time to estimate computational complexity\&. 
.SH "Member Function Documentation"
.PP 
.SS "Benchmark::generateRaport (long double nextTime, int size)\fC [private]\fP"

.PP
Generates raport with program tests outputs\&. 
.PP
\fBParameters:\fP
.RS 4
\fInextTime\fP A new calculated time (for new file size)\&. 
.br
\fISize\fP A size of the currently working file\&. 
.RE
.PP

.PP
\fBTodo\fP
.RS 4
FILE OVERWRITING, NEED TO IMPLEMENT NEW NAMES 
.RE
.PP

.PP
.nf
6                                                             {
7     /*! \todo FILE OVERWRITING, NEED TO IMPLEMENT NEW NAMES */
8     std::ofstream raportFile;
9     std::string stringNextTime = std::to_string(nextTime);
10 
11     // \&.xls as excel file format
12     raportFile\&.open("test\&.xls", std::ios::in | std::ios::app);
13         assert(raportFile\&.is_open() && ("I can't open file\&."));
14     // need to change '\&.' on ',' due to excel string format 
15     boost::algorithm::replace_first(stringNextTime, "\&.", ",");
16     
17     raportFile << size << "\n" << stringNextTime << "\n";
18     raportFile\&.close();
19 }
.fi
.SS "Benchmark::getAvr (std::vector< long double > times)\fC [private]\fP"

.PP
Measures the average duration from 10 samples\&. 
.PP
\fBParameters:\fP
.RS 4
\fItimes\fP A container with times from tests\&. 
.RE
.PP

.PP
.nf
21                                                         {
22     long double avrg = 0\&.0;
23 
24     //add 10 values, than count average
25     for (int i = 0; i < (signed)times\&.size(); i++){
26         avrg += times[i];
27     }
28 
29     avrg /= (long double)times\&.size();
30     return avrg;
31 }
.fi
.SS "Benchmark::measureTime (int * dataTable, int dataSize)\fC [private]\fP"

.PP
Measures the duration of the work of assignment function\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdataTable\fP A container with random integers from earlier made files\&. 
.br
\fIdataSize\fP A size of the file\&. 
.RE
.PP

.PP
.nf
33                                                        {
34     // container for counted working times
35     std::vector<long double> estimateTimes;
36 
37     for (int j = 0; j < 10; j++){
38         // Here starts the timer
39         boost::timer::cpu_timer startTime;
40         for (int i = 0; i < dataSize; i++){
41             dataTable[i] *= 2;
42         }
43         // Here it ends
44         boost::timer::cpu_times endTime = startTime\&.elapsed();
45         // add new time to the vector
46         estimateTimes\&.push_back(static_cast<long double>(endTime\&.wall * SEC));
47     }
48     // for better display
49     std::cout\&.fixed;
50     long double DurTime = getAvr(estimateTimes);
51     std::cout << "Time (average, 10 samples) for " << dataSize << " elements: " << DurTime << " sec"<< std::endl;
52     generateRaport(DurTime, dataSize);
53 }
.fi
.SS "Benchmark::test (\fBInputFiles\fP files)"

.PP
Main testing function\&. 
.PP
\fBParameters:\fP
.RS 4
\fIfiles\fP random generated files with integers 
.RE
.PP

.PP
.nf
55                                     {
56     // temp memory container
57     int* tabForData = NULL;
58     int tempValue = 0;
59     int count = 0;
60     std::fstream newFile;
61 
62     for (int i = 0; i < files\&.return_number_files() - FIRST_ARGUMENT; i++){
63         // Opening file + making new table with content
64         tabForData = new int[files\&.return_file_size(i)];
65         newFile\&.open((files\&.return_file_name(i) + "\&.txt"), std::ios::in);
66         
67         // Checking if file is opened correctly
68         assert(newFile\&.is_open() && ("I can't open file\&."));
69 
70         for (int j = 0; j < files\&.return_file_size(i); j++){
71             newFile >> tempValue;
72             tabForData[j] = tempValue;
73         }
74         newFile\&.close();
75 
76         // Testing time here
77         measureTime(tabForData, files\&.return_file_size(i));
78         delete[] tabForData;
79     }
80 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "Benchmark::testTimes\fC [private]\fP"

.PP
A container for calculated times\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Lab 1 from the source code\&.
