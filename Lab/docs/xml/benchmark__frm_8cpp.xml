<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="benchmark__frm_8cpp" kind="file" language="C++">
    <compoundname>benchmark_frm.cpp</compoundname>
    <includes refid="benchmark__frm_8h" local="yes">benchmark_frm.h</includes>
    <incdepgraph>
      <node id="14">
        <label>boost/algorithm/string/erase.hpp</label>
      </node>
      <node id="11">
        <label>cassert</label>
      </node>
      <node id="9">
        <label>string</label>
      </node>
      <node id="1">
        <label>benchmark_frm.h</label>
        <link refid="benchmark__frm_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="0">
        <label>src/benchmark_frm.cpp</label>
        <link refid="benchmark_frm.cpp"/>
        <childnode refid="1" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>boost\chrono\duration.hpp</label>
      </node>
      <node id="3">
        <label>fstream</label>
      </node>
      <node id="13">
        <label>random</label>
      </node>
      <node id="10">
        <label>cstdio</label>
      </node>
      <node id="12">
        <label>ctime</label>
      </node>
      <node id="2">
        <label>vector</label>
      </node>
      <node id="6">
        <label>boost\algorithm\string\replace.hpp</label>
      </node>
      <node id="8">
        <label>iostream</label>
      </node>
      <node id="4">
        <label>boost\timer\timer.hpp</label>
      </node>
      <node id="7">
        <label>inputfile_txt.h</label>
        <link refid="inputfile__txt_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <briefdescription>
<para>Source code for <ref refid="class_benchmark" kindref="compound">Benchmark</ref> class. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*!<sp/>\file<sp/>benchmark_frm.cpp</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/><sp/><sp/><sp/>\brief<sp/>Source<sp/>code<sp/>for<sp/>Benchmark<sp/>class</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="benchmark__frm_8h" kindref="compound" tooltip="A Benchmark class. ">benchmark_frm.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_benchmark_1a967a51b006393725fedf53119f467a16" kindref="member" tooltip="Generates raport with program tests outputs. ">Benchmark::generateRaport</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nextTime,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size){</highlight><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/><sp/><sp/>/*!<sp/>\todo<sp/>FILE<sp/>OVERWRITING,<sp/>NEED<sp/>TO<sp/>IMPLEMENT<sp/>NEW<sp/>NAMES<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ofstream<sp/>raportFile;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>stringNextTime<sp/>=<sp/>std::to_string(nextTime);</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>.xls<sp/>as<sp/>excel<sp/>file<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>raportFile.open(</highlight><highlight class="stringliteral">&quot;test.xls&quot;</highlight><highlight class="normal">,<sp/>std::ios::in<sp/>|<sp/>std::ios::app);</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(raportFile.is_open()<sp/>&amp;&amp;<sp/>(</highlight><highlight class="stringliteral">&quot;I<sp/>can&apos;t<sp/>open<sp/>file.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>change<sp/>&apos;.&apos;<sp/>on<sp/>&apos;,&apos;<sp/>due<sp/>to<sp/>excel<sp/>string<sp/>format<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>boost::algorithm::replace_first(stringNextTime,<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/>raportFile<sp/>&lt;&lt;<sp/>size<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>stringNextTime<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/>raportFile.close();</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_benchmark_1a3efa1ec3d4e76eb0fa1633dda265c711" kindref="member" tooltip="Measures the average duration from 10 samples. ">Benchmark::getAvr</ref>(std::vector&lt;long<sp/>double&gt;times){</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>avrg<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//add<sp/>10<sp/>values,<sp/>than<sp/>count<sp/>average</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>(signed)times.size();<sp/>i++){</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>avrg<sp/>+=<sp/>times[i];</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>avrg<sp/>/=<sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>double)times.size();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>avrg;</highlight></codeline>
<codeline lineno="31"><highlight class="normal">}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_benchmark_1a2256d13e70e2e5f0df7583118dd88d49" kindref="member" tooltip="Measures the duration of the work of assignment function. ">Benchmark::measureTime</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>*dataTable,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>dataSize){</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>container<sp/>for<sp/>counted<sp/>working<sp/>times</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;long<sp/>double&gt;<sp/>estimateTimes;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>10;<sp/>j++){</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Here<sp/>starts<sp/>the<sp/>timer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::timer::cpu_timer<sp/>startTime;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>dataSize;<sp/>i++){</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataTable[i]<sp/>*=<sp/>2;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Here<sp/>it<sp/>ends</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::timer::cpu_times<sp/>endTime<sp/>=<sp/>startTime.elapsed();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>new<sp/>time<sp/>to<sp/>the<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>estimateTimes.push_back(static_cast&lt;long<sp/>double&gt;(endTime.wall<sp/>*<sp/><ref refid="benchmark__frm_8h_1a0383b9707104291ad0c37593d975221b" kindref="member">SEC</ref>));</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>better<sp/>display</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout.fixed;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>DurTime<sp/>=<sp/><ref refid="class_benchmark_1a3efa1ec3d4e76eb0fa1633dda265c711" kindref="member" tooltip="Measures the average duration from 10 samples. ">getAvr</ref>(estimateTimes);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Time<sp/>(average,<sp/>10<sp/>samples)<sp/>for<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>dataSize<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>elements:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>DurTime<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>sec&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_benchmark_1a967a51b006393725fedf53119f467a16" kindref="member" tooltip="Generates raport with program tests outputs. ">generateRaport</ref>(DurTime,<sp/>dataSize);</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_benchmark_1a9d8c911b12652e87e91da87f85e6cdf7" kindref="member" tooltip="Main testing function. ">Benchmark::test</ref>(<ref refid="class_input_files" kindref="compound">InputFiles</ref><sp/>files){</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>temp<sp/>memory<sp/>container</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>tabForData<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tempValue<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>std::fstream<sp/>newFile;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>files.<ref refid="class_input_files_1a3db5accd81913e0b89fdd3b4650c8923" kindref="member" tooltip="Return number of files. ">return_number_files</ref>()<sp/>-<sp/><ref refid="inputfile__txt_8h_1ac6795aca310766e1b10d90013aac6d47" kindref="member" tooltip="A const value for representing first argument from command prompt (name of the program) */...">FIRST_ARGUMENT</ref>;<sp/>i++){</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Opening<sp/>file<sp/>+<sp/>making<sp/>new<sp/>table<sp/>with<sp/>content</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tabForData<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">[files.<ref refid="class_input_files_1a9c65bfcc0e684642c40c999959d6d014" kindref="member" tooltip="Return sizes of files (only for read purpose) ">return_file_size</ref>(i)];</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newFile.open((files.<ref refid="class_input_files_1a9246bc217efcfa1569478bcf44e1cd20" kindref="member" tooltip="Return names of files (only for read purpose) ">return_file_name</ref>(i)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.txt&quot;</highlight><highlight class="normal">),<sp/>std::ios::in);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Checking<sp/>if<sp/>file<sp/>is<sp/>opened<sp/>correctly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(newFile.is_open()<sp/>&amp;&amp;<sp/>(</highlight><highlight class="stringliteral">&quot;I<sp/>can&apos;t<sp/>open<sp/>file.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>files.<ref refid="class_input_files_1a9c65bfcc0e684642c40c999959d6d014" kindref="member" tooltip="Return sizes of files (only for read purpose) ">return_file_size</ref>(i);<sp/>j++){</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newFile<sp/>&gt;&gt;<sp/>tempValue;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tabForData[j]<sp/>=<sp/>tempValue;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newFile.close();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Testing<sp/>time<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_benchmark_1a2256d13e70e2e5f0df7583118dd88d49" kindref="member" tooltip="Measures the duration of the work of assignment function. ">measureTime</ref>(tabForData,<sp/>files.<ref refid="class_input_files_1a9c65bfcc0e684642c40c999959d6d014" kindref="member" tooltip="Return sizes of files (only for read purpose) ">return_file_size</ref>(i));</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>tabForData;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal">}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="C:/Users/Daniel/Desktop/myStuff/209185/Lab1/src/benchmark_frm.cpp"/>
  </compounddef>
</doxygen>
