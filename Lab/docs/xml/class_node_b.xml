<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.9.1">
  <compounddef id="class_node_b" kind="class" language="C++" prot="public">
    <compoundname>NodeB</compoundname>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_node_b_1aa2f9f90efcd38311bf153da95f3561c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class Tree</definition>
        <argsstring></argsstring>
        <name>Tree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" line="91" column="1" bodyfile="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_node_b_1a9ce10550e81de48553bf37679a491ef5" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>NodeB&lt; T &gt;::data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
<para>Container for random integer data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" line="121" column="1" bodyfile="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_node_b_1a62077bf9d12b532c6177544bce9947d0" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>NodeB&lt; T &gt;::empty</definition>
        <argsstring></argsstring>
        <name>empty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Flag for empty(true)/nonempty node(false) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" line="116" column="1" bodyfile="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_node_b_1a8d8ba7388e899b41d6a50ba3e910d065" prot="private" static="no" mutable="no">
        <type><ref refid="class_node_b" kindref="compound">NodeB</ref>&lt; T &gt; *</type>
        <definition>NodeB&lt; T &gt;::left</definition>
        <argsstring></argsstring>
        <name>left</name>
        <briefdescription>
<para>link with left branch node from parent </para>        </briefdescription>
        <detaileddescription>
<para>Data smaller than parent data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" line="104" column="1" bodyfile="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_node_b_1afba2126c75ecfa0d8e3320c07e3257dc" prot="private" static="no" mutable="no">
        <type><ref refid="class_node_b" kindref="compound">NodeB</ref>&lt; T &gt; *</type>
        <definition>NodeB&lt; T &gt;::parent</definition>
        <argsstring></argsstring>
        <name>parent</name>
        <briefdescription>
<para>link with parent node from tree </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" line="97" column="1" bodyfile="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_node_b_1a91e0cdfcaf563461d96079054627ced4" prot="private" static="no" mutable="no">
        <type><ref refid="class_node_b" kindref="compound">NodeB</ref>&lt; T &gt; *</type>
        <definition>NodeB&lt; T &gt;::right</definition>
        <argsstring></argsstring>
        <name>right</name>
        <briefdescription>
<para>link with right branch node from parent </para>        </briefdescription>
        <detaileddescription>
<para>Data bigger than parent data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" line="111" column="1" bodyfile="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_node_b_1ae5540d7200ba2dc49617abb2cfd710b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T NodeB&lt; T &gt;::get_data</definition>
        <argsstring>()</argsstring>
        <name>get_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" line="54" column="1" bodyfile="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" bodystart="54" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="class_node_b_1a08d7227797bed893b5124da7d222154c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const bool</type>
        <definition>NodeB&lt; T &gt;::is_empty</definition>
        <argsstring>()</argsstring>
        <name>is_empty</name>
        <briefdescription>
<para>return state of node </para>        </briefdescription>
        <detaileddescription>
<para>true - empty <ref refid="class_node_b" kindref="compound">NodeB</ref> false - not empty <ref refid="class_node_b" kindref="compound">NodeB</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" line="85" column="1" bodyfile="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" bodystart="85" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="class_node_b_1a5ef89d0aa079d6d7661eb9eeefd8ad2d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NodeB&lt; T &gt;::NodeB</definition>
        <argsstring>()</argsstring>
        <name>NodeB</name>
        <briefdescription>
<para>A constructor. </para>        </briefdescription>
        <detaileddescription>
<para>Create empty node. Every pointer is NULL. root data = 0;</para><para>Create empty <ref refid="class_node_b" kindref="compound">NodeB</ref>. Every pointer is NULL.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>inserted data from argument </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" line="21" column="1" bodyfile="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" bodystart="21" bodyend="21"/>
      </memberdef>
      <memberdef kind="function" id="class_node_b_1ab791d657a0e5db5eccd1715b24bdbeff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NodeB&lt; T &gt;::NodeB</definition>
        <argsstring>(T data)</argsstring>
        <name>NodeB</name>
        <param>
          <type>T</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" line="31" column="1" bodyfile="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" bodystart="31" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="class_node_b_1a42c20008f8d375b5386bb050b4330882" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_node_b" kindref="compound">NodeB</ref>&lt; T &gt; *</type>
        <definition>NodeB&lt; T &gt;::return_left</definition>
        <argsstring>()</argsstring>
        <name>return_left</name>
        <briefdescription>
<para>return pointer to the left branch of node </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" line="61" column="1" bodyfile="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" bodystart="61" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="class_node_b_1a2e720fb5a79c8171e09d647f06de51f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_node_b" kindref="compound">NodeB</ref>&lt; T &gt; *</type>
        <definition>NodeB&lt; T &gt;::return_parent</definition>
        <argsstring>()</argsstring>
        <name>return_parent</name>
        <briefdescription>
<para>return pointer to the parent of node </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" line="75" column="1" bodyfile="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" bodystart="75" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="class_node_b_1a2fc22bbaf6b604dd5ad4ab60b26b35d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_node_b" kindref="compound">NodeB</ref>&lt; T &gt; *</type>
        <definition>NodeB&lt; T &gt;::return_right</definition>
        <argsstring>()</argsstring>
        <name>return_right</name>
        <briefdescription>
<para>return pointer to the right branch of node </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" line="68" column="1" bodyfile="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" bodystart="68" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="class_node_b_1a4c3fbc5d2fc1c386e71067a7db7bb84c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>NodeB&lt; T &gt;::~NodeB</definition>
        <argsstring>()</argsstring>
        <name>~NodeB</name>
        <briefdescription>
<para>A destructor. </para>        </briefdescription>
        <detaileddescription>
<para>Free all memory. Deleting this pointer, so it&apos;s dangerous. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" line="39" column="1" bodyfile="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" bodystart="39" bodyend="49"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="18">
        <label>T</label>
      </node>
      <node id="17">
        <label>NodeB&lt; T &gt;</label>
        <link refid="class_node_b"/>
        <childnode refid="18" relation="usage">
          <edgelabel>data</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" line="12" column="1" bodyfile="C:/Users/Daniel/Desktop/myStuff/209185/209185/Lab/inc/tree_node.h" bodystart="12" bodyend="122"/>
    <listofallmembers>
      <member refid="class_node_b_1a9ce10550e81de48553bf37679a491ef5" prot="private" virt="non-virtual"><scope>NodeB</scope><name>data</name></member>
      <member refid="class_node_b_1a62077bf9d12b532c6177544bce9947d0" prot="private" virt="non-virtual"><scope>NodeB</scope><name>empty</name></member>
      <member refid="class_node_b_1ae5540d7200ba2dc49617abb2cfd710b4" prot="public" virt="non-virtual"><scope>NodeB</scope><name>get_data</name></member>
      <member refid="class_node_b_1a08d7227797bed893b5124da7d222154c" prot="public" virt="non-virtual"><scope>NodeB</scope><name>is_empty</name></member>
      <member refid="class_node_b_1a8d8ba7388e899b41d6a50ba3e910d065" prot="private" virt="non-virtual"><scope>NodeB</scope><name>left</name></member>
      <member refid="class_node_b_1a5ef89d0aa079d6d7661eb9eeefd8ad2d" prot="public" virt="non-virtual"><scope>NodeB</scope><name>NodeB</name></member>
      <member refid="class_node_b_1ab791d657a0e5db5eccd1715b24bdbeff" prot="public" virt="non-virtual"><scope>NodeB</scope><name>NodeB</name></member>
      <member refid="class_node_b_1afba2126c75ecfa0d8e3320c07e3257dc" prot="private" virt="non-virtual"><scope>NodeB</scope><name>parent</name></member>
      <member refid="class_node_b_1a42c20008f8d375b5386bb050b4330882" prot="public" virt="non-virtual"><scope>NodeB</scope><name>return_left</name></member>
      <member refid="class_node_b_1a2e720fb5a79c8171e09d647f06de51f6" prot="public" virt="non-virtual"><scope>NodeB</scope><name>return_parent</name></member>
      <member refid="class_node_b_1a2fc22bbaf6b604dd5ad4ab60b26b35d5" prot="public" virt="non-virtual"><scope>NodeB</scope><name>return_right</name></member>
      <member refid="class_node_b_1a91e0cdfcaf563461d96079054627ced4" prot="private" virt="non-virtual"><scope>NodeB</scope><name>right</name></member>
      <member refid="class_node_b_1aa2f9f90efcd38311bf153da95f3561c0" prot="public" virt="non-virtual"><scope>NodeB</scope><name>Tree</name></member>
      <member refid="class_node_b_1a4c3fbc5d2fc1c386e71067a7db7bb84c" prot="public" virt="non-virtual"><scope>NodeB</scope><name>~NodeB</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
