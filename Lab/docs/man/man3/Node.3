.TH "Node" 3 "Thu Mar 19 2015" "Version 1.0" "Lab 2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Node \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <tree_node\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBadd\fP (std::fstream &openFile, int tempData)"
.br
.RI "\fIadding new branch nodes to the parent node \fP"
.ti -1c
.RI "const int \fBget_data_container\fP ()"
.br
.RI "\fIreturn value of date from node \fP"
.ti -1c
.RI "bool \fBis_emptyf\fP ()"
.br
.RI "\fIreturn state of node \fP"
.ti -1c
.RI "\fBNode\fP (int data)"
.br
.RI "\fIroot constructor \fP"
.ti -1c
.RI "\fBNode\fP (int data, \fBNode\fP *parent_ptr)"
.br
.RI "\fIchild constructor \fP"
.ti -1c
.RI "\fBNode\fP * \fBreturn_left\fP ()"
.br
.RI "\fIreturn pointer to the left branch of node \fP"
.ti -1c
.RI "\fBNode\fP * \fBreturn_right\fP ()"
.br
.RI "\fIreturn pointer to the right branch of node \fP"
.ti -1c
.RI "\fB~Node\fP ()"
.br
.RI "\fIdeconstructor \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "int \fBdata_container\fP"
.br
.RI "\fIContainer for random integer data\&. \fP"
.ti -1c
.RI "bool \fBis_empty\fP"
.br
.ti -1c
.RI "\fBNode\fP * \fBleft\fP"
.br
.RI "\fIlink with left branch node from parent \fP"
.ti -1c
.RI "\fBNode\fP * \fBparent\fP"
.br
.RI "\fIlink with parent node from tree \fP"
.ti -1c
.RI "\fBNode\fP * \fBright\fP"
.br
.RI "\fIlink with right branch node from parent \fP"
.in -1c
.SH "Detailed Description"
.PP 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "Node::Node (int data)"

.PP
root constructor 
.PP
.nf
8                   {
9     data_container = data;
10     parent = NULL;
11     left = NULL;
12     right = NULL;
13     is_empty = false;
14 }
.fi
.SS "Node::Node (int data, \fBNode\fP * parent_ptr)"

.PP
child constructor 
.PP
.nf
17                                     {
18     data_container = data;
19     parent = parent_ptr;
20     left = NULL;
21     right = NULL;
22     is_empty = false;
23 }
.fi
.SS "Node::~Node ()"

.PP
deconstructor 
.PP
.nf
26            {
27     delete this->left;
28     delete this->right;
29 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "Node::add (std::fstream & openFile, int tempData)"

.PP
adding new branch nodes to the parent node !! This is a recursive function\&.!! End point: when file is ended\&. Open file with random int data, check if there is open left/right branch node from parent: Algorithm: add(openFile,dataFromFile){ if rootData is bigger or equal dataFromFile if thereIsLeftNode add(openFile,datafromFile) // opening new node else create leftNode and add data if rootData is smaller than dataFromFile if thereisRightNode add(openFile,datafromFile) // opening new node else create rightNode and add data
.PP
\fBParameters:\fP
.RS 4
\fIopenFile\fP actually opened file with random int data 
.br
\fItempData\fP container for data from file 
.RE
.PP

.PP
.nf
31                                                 {
32     // algorithm described in header file
33     if (this->data_container >= tempData){
34         if (this->left == NULL){
35             this->left = new Node(tempData, this->parent);
36         }
37         else{
38             this->left->add(openFile, tempData);
39         }
40     }
41     else{
42         if (this->right == NULL){
43             this->right = new Node(tempData, this->parent);
44         }
45         else{
46             this->right->add(openFile, tempData);
47         }
48     }
49 }
.fi
.SS "Node::get_data_container ()\fC [inline]\fP"

.PP
return value of date from node 
.PP
.nf
40                                              {
41             return data_container;
42         }
.fi
.SS "Node::is_emptyf ()\fC [inline]\fP"

.PP
return state of node true - empty node false - not empty node 
.PP
.nf
64                         {
65             return is_empty;
66         }
.fi
.SS "Node::return_left ()\fC [inline]\fP"

.PP
return pointer to the left branch of node 
.PP
.nf
47                                   {
48             return left;
49         }
.fi
.SS "Node::return_right ()\fC [inline]\fP"

.PP
return pointer to the right branch of node 
.PP
.nf
54                                    {
55             return right;
56         }
.fi
.SH "Member Data Documentation"
.PP 
.SS "Node::data_container\fC [private]\fP"

.PP
Container for random integer data\&. 
.SS "bool Node::is_empty\fC [private]\fP"

.SS "Node::left\fC [private]\fP"

.PP
link with left branch node from parent Data smaller than parent data\&. 
.SS "Node::parent\fC [private]\fP"

.PP
link with parent node from tree 
.SS "Node::right\fC [private]\fP"

.PP
link with right branch node from parent Data bigger than parent data\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Lab 2 from the source code\&.
