.TH "List" 3 "Thu Mar 19 2015" "Version 1.0" "Lab 2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
List \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <list\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void \fBadd\fP (std::fstream &file)"
.br
.ti -1c
.RI "\fBList\fP (\fBInputFiles\fP &file, \fBBenchmark\fP &listTest)"
.br
.RI "\fIA constructor\&. \fP"
.ti -1c
.RI "\fB~List\fP ()"
.br
.RI "\fIA deconstructor\&. \fP"
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBLNode\fP * \fBheadPtr\fP"
.br
.ti -1c
.RI "\fBLNode\fP * \fBtailPtr\fP"
.br
.ti -1c
.RI "\fBLNode\fP * \fBtempPtr\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
An implementation of linked list\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "List::List (\fBInputFiles\fP & file, \fBBenchmark\fP & listTest)"

.PP
A constructor\&. 
.PP
.nf
7                                                {
8     // open file for data in root
9     std::fstream openFile;
10     // take name of this file
11     std::string fileName;
12     // file size
13     int fileSize;
14     // average time from test
15     long double avrgTime;
16 
17     for (int i = 0; i < file\&.return_number_files() - FIRST_ARGUMENT; i++){
18         fileName = file\&.return_file_name(i);
19         fileSize = file\&.return_file_size(i);
20         for (int i = 0; i < 10; i++){
21             openFile\&.open(fileName + "\&.txt");
22             // Check if file is opened correctly
23             assert(openFile\&.is_open() && "I can't open this file\&.");
24 
25             listTest\&.test(openFile, this);
26 
27             //initial again for next test
28             this->~List();
29             this->headPtr = nullptr;
30             this->tailPtr = nullptr;
31             this->tempPtr = nullptr;
32             openFile\&.close();
33         }
34         //generate raport
35         avrgTime = listTest\&.getAvr(listTest\&.testTimes);
36         listTest\&.generateRaport(avrgTime, fileSize, fileName, LIST);
37     }
38 }
.fi
.SS "List::~List ()"

.PP
A deconstructor\&. 
.PP
.nf
41            {
42     headPtr = NULL;
43     tailPtr = NULL;
44     tempPtr = NULL;
45 
46     delete headPtr;
47     delete tailPtr;
48     delete tempPtr;
49 }
.fi
.SH "Member Function Documentation"
.PP 
.SS "void List::add (std::fstream & file)"

.PP
.nf
51                               {
52     //container for temporary data
53     int tempData;
54 
55     //create first node of the list
56     file >> tempData;
57     this->tailPtr = new LNode(tempData);
58     this->headPtr = this->tailPtr;
59     this->tempPtr = this->tailPtr;
60 
61     while (file >> tempData){
62         this->tailPtr = new LNode(tempData);
63         this->tempPtr->nextNode = this->tailPtr;
64         this->tempPtr = this->tempPtr->nextNode;
65     }
66 }
.fi
.SH "Member Data Documentation"
.PP 
.SS "List::headPtr\fC [private]\fP"
First element from the list pointer\&. 
.SS "List::tailPtr\fC [private]\fP"
Last element pointer 
.SS "List::tempPtr\fC [private]\fP"
Temporary pointer, help for adding new nodes\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Lab 2 from the source code\&.
